<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable annotation configuration -->
    <context:annotation-config/>

    <!-- Scan packages for Spring annotations -->
    <context:component-scan base-package="au.org.theark.core.dao"/> <!--  Belongs to  Ark-Core package that will be exposed to all sub-applications-->
    <context:component-scan base-package="au.org.theark.core.service"/>
    
    <!--  Belongs to the Ark Container Application -->
    <context:component-scan base-package="au.org.theark.dao"/> 
    <context:component-scan base-package="au.org.theark.service"/>
    <context:component-scan base-package="au.org.theark.security"/>
    
    <!-- Imports the sub-module contexts (dynamically) -->
	<!-- If they're in a JAR in WEB-INF/lib the following will work: -->
	<import resource="classpath*:/META-INF/services/sub-module.ctx.xml" />

    <!-- Spring AOP auto-proxy creation (required to support Shiro annotations) -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>


    <!-- An Oracle RDBMS data source.-->
         
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="Jdbc:oracle:thin:@192.168.2.227:1521:dbdevel"/>
        <property name="username" value="eta"/>
        <property name="password" value="veTum1n"/>
    </bean>
    
    <!--  A LDAP data source -->
    
    <bean id="ldapDataContextSource" class="org.springframework.ldap.core.support.LdapContextSource">
      
      <property name="url"  value="ldap://192.168.2.229:389"/>  <!--  Development -->
      <!-- <property name="url" value ="ldap://172.19.200.229:389"/>   TestProd -->
      <property name="base" value="dc=ldapdevel,dc=wager,dc=org,dc=au"/>
      <property name="userDn" value="cn=admin,dc=ldapdevel,dc=wager,dc=org,dc=au" />
	  <property name="password" value="veTum1n" />

    </bean>

	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<property name="contextSource" ref="ldapDataContextSource" />
	</bean>

	<!--  Since we need to initialise the properties of this DAO, am forced to define it here explicitly even though the dao is auto-detected by Scan above, see component-scan-->
	<bean id="ldapPersonDao" class="au.org.theark.core.dao.LdapPersonDao">
		<property name="ldapTemplate" ref="ldapTemplate" />
		<property name="basePeopleDn" value="ou=people" />
		<property name="baseGroupDn" value="ou=groups"/>
		<property name="baseModuleDn" value="ou=modules"/>
		<property name="baseDC" value="dc=ldapdevel,dc=wager,dc=org,dc=au" />
	</bean>
	
    <!--  Hibernate Session Factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
        	<list>
				<value>au.org.theark.study.model.entity</value>
				<value>au.org.theark.phenotypic.model.entity</value>        		
				<value>au.org.theark.geno.model.entity</value>
        	</list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
            </props>
        </property>
        <property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
                </entry>
            </map>
        </property>
        
    </bean>

    
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven/>

    <!-- =========================================================
         Shiro Components
         ========================================================= -->

    <!-- Shiro's main business-tier object for web-enabled applications
         (use org.apache.shiro.web.DefaultWebSecurityManager instead when there is no web environment)-->
    <bean id="securityManager" class="org.apache.shiro.web.DefaultWebSecurityManager">
        <!-- Single realm app (realm configured next, below).  If you have multiple realms, use the 'realms'
      property instead. -->
        <property name="realm" ref="arkLdapRealm"/>
        <!-- Uncomment this next property if you want heterogenous session access or clusterable/distributable
             sessions.  The default value is 'http' which uses the Servlet container's HttpSession as the underlying
             Session implementation.
        <property name="sessionMode" value="shiro"/> -->
    </bean>


    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- =========================================================
         The Wicket Application we want Spring to manage.Without Spring we would define this in the web.xml, since we
         want Spring to manage it we need to declare it here. The wicket-spring module provides a
         factory that delegates the call to 'Spring' to get an instance of the web application defined below.See web.xml 
         for the declaration of the factory. 
         
         ========================================================= -->
	  <bean id="wicketApplication" class="au.org.theark.web.application.ArkWebApplication" />

</beans>


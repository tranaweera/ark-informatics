<?xml version="1.0" encoding="UTF-8"?>

<!-- Poolman Configuration file for Biogenix

     Please note : nativeResults must be set to TRUE when working with
                   postgres.
                   
-->

<poolman>



  <!-- =============================================================== -->

  <!-- If the management-mode is JMX, then JMX will be used to deploy  -->

  <!-- all of the DataSource pools and object pools, and the JMX admin -->

  <!-- will be started for HTTP-based administration of pools. JMX     -->

  <!-- is somewhat heavy for applications that necessarily require it, -->

  <!-- and its internal ClassLoaders occasionally create conflicts.    -->

  <!-- Thus it can be commented out and not used.                      -->

  <!-- POSSIBLE VALUES: jmx, local                                     -->

  <!-- DEFAULT: local (JMX not used)                                   -->             

  <!-- =============================================================== -->

  <management-mode>local</management-mode>



  

  <!-- ========================================================== -->

  <!-- These entries are an example of JDBC Connection pooling.   -->

  <!-- Many of the parameters are optional. Consult the           -->

  <!-- UsersGuide.html doument for guidance and element           --> 

  <!-- definitions.                                               -->

  <!-- ========================================================== -->



  <datasource>



    <!-- ============================== -->

    <!-- Physical Connection Attributes -->

    <!-- ============================== -->



    <!-- Standard JDBC Driver info -->
    <!--
    <dbname>sqlserver</dbname>
    <jndiName>jndiccv</jndiName>
    <driver>com.microsoft.jdbc.sqlserver.SQLServerDriver</driver>
    <url>jdbc:microsoft:sqlserver://localhost;SelectMethod=Cursor</url>
    <username></username>
    <password></password>
    -->

    <!-- Postgres Database -->
    <!--
    <dbname>postgres</dbname>
    <jndiName>jndiccv</jndiName>
    <driver>org.postgresql.Driver</driver>
    <url>jdbc:postgresql://localhost:5432/bluefirev451</url>
    <username>postgres</username>
    <password>postgres</password>
    -->

    <!-- Oracle Database -->

    <dbname>oracle</dbname>
    <jndiName>oracle</jndiName>
    <driver>oracle.jdbc.OracleDriver</driver>
    <url>jdbc:oracle:thin:@localhost:21521:prod</url>
    <username>wagerlab</username>
    <password>veTum1n</password>




    <!-- Where should log and debug information be printed?      -->

    <!-- DEFAULT: System.out                                     -->

    <!-- <logFile>D:/tomcat_casegenix/logs/poolman.log</logFile> -->



    <!-- Transaction Isolation Level, an optional value that,    -->

    <!-- if present, must be one of the following:               -->

    <!--   NONE                                                  -->

    <!--   READ_COMMITTED                                        -->

    <!--   READ_UNCOMMITTED                                      -->

    <!--   REPEATABLE_READ                                       -->

    <!--   SERIALIZABLE                                          -->

    <!-- If the value is misspelled or ommitted, the default     -->

    <!-- will be applied. The value is not case-sensitive.       -->

    <!-- DEFAULT: READ COMITTED                                  -->

    <txIsolationLevel>READ_COMMITTED</txIsolationLevel>





    <!-- If the following element is set to true, then PoolMan's  -->
    <!-- scrollable/updatable ResultSet will not be used, and the -->
    <!-- underlying driver's ResultSet will be used instead. This -->
    <!-- provides a performance gain in certain rare instances at -->
    <!-- the expense of functionality.                            -->
    <!-- DEFAULT: false                                           -->

    
    
    <nativeResults>true</nativeResults>



    <!-- If set to true, the following attribute will cause  -->

    <!-- all PreparedStatements to be pooled and reused      -->

    <!-- rather than recreated with each invocation.         -->

    <!-- DEFAULT: true                                       -->

    <poolPreparedStatements>true</poolPreparedStatements>





    <!-- ======================== -->

    <!-- Pool Behavior Attributes -->

    <!-- ======================== -->



    <!-- Connections created when the pool is instantiated -->

    <!-- DEFAULT: 1                                        -->

    <initialConnections>1</initialConnections>



    <!-- The pool will never shrink below this number -->

    <!-- DEFAULT: 0                                   -->

    <minimumSize>1</minimumSize>



    <!-- The pool will never grow larger than this value -->

    <maximumSize>30</maximumSize>



    <!-- If the maximum size of a pool is reached but requests  -->

    <!-- are still waiting on objects, PoolMan will create new  -->

    <!-- emergency objects if this value is set to true. This   -->

    <!-- will temporarily increase the size of the pool, but    -->

    <!-- the pool will shrink back down to acceptable size      -->

    <!-- automatically when the skimmer activates. If this      -->

    <!-- value is set to false, the requests will sit and wait  -->

    <!-- until an object is available.                          -->

    <!-- DEFAULT: true                                          -->

    <maximumSoft>true</maximumSoft>



    <!-- The connection will be destroyed after living for a     -->

    <!-- duration of this value. IN SECONDS.                     -->

    <!-- DEFAULT: 1200 (20 minutes)                              -->

    <connectionTimeout>1200</connectionTimeout>



    <!-- A user will lose a Connection and it will automatically -->

    <!-- return to its pool after the duration greater than or   -->

    <!-- equal to this value. If this value is set to 0 or less, -->

    <!-- no user timeout will be enforced. IN SECONDS.           -->

    <!-- DEFAULT: 20                                             --> 

    <userTimeout>300</userTimeout>



    <!-- How frequently each object's connection timeout and     -->

    <!-- user timeout values will be examined for collection.    -->

    <!-- IN SECONDS.                                             -->

    <!-- DEFAULT: 420 (7 minutes)                                -->

    <skimmerFrequency>300</skimmerFrequency>



    <!-- Each time the pool is sized down, how many connections  -->

    <!-- should be removed from it? This value prevents backing  -->

    <!-- off the pool too quickly.                               -->

    <shrinkBy>10</shrinkBy>



    <!-- Each time a connection is requested, it is validated by -->

    <!-- the pool to ensure that it is active. If this element   -->

    <!-- exists, then it is treated as a SQL query that is       -->

    <!-- executed on the raw Connection (bypassing the cache)    -->

    <!-- in order to ensure the Connection is valid. If this     -->

    <!-- element does NOT exist, then the Connection.isClosed()  -->

    <!-- method is used to validate it instead. The              -->

    <!-- Connection.isClosed() method is unreliable on some      -->

    <!-- drivers.                                                -->

    <!-- DEFAULT: null                                           -->

    <!--validationQuery>SELECT id FROM users</validationQuery-->



    <!-- If set to true, the logger will display verbose info    -->

    <!-- DEFAULT: false                                          -->

    <debugging>false</debugging>



    <!-- XA Connection Attributes   -->

    <!-- NOTE: MEASURED IN SECONDS. -->

    <transactionTimeout>100</transactionTimeout>



    <!-- Query Cache Attributes-->



    <!-- If enabled, queries will be cached. The cache is        -->

    <!-- asynchronously updated in the background.               -->

    <!-- DEFAULT: false                                          -->

    <cacheEnabled>true</cacheEnabled>



    <!-- The maximum number of query/ResultSet pairs the         -->

    <!-- cache can contain.                                      --> 

    <!-- DEFAULT: 5                                              -->

    <cacheSize>10</cacheSize>



    <!-- How long the cache waits before re-loading its          -->

    <!-- ResultSets from the underlying database.                -->

    <!-- IN SECONDS.                                             -->

    <!-- DEFAULT: 30                                             -->

    <cacheRefreshInterval>30</cacheRefreshInterval>



    <!-- Whether a SQLException should cause the Connection to   --> 

    <!-- be removed from the pool and destroyed.                 -->

    <!-- DEFAULT: false                                          -->

    <removeOnExceptions>false</removeOnExceptions>



  </datasource>



  <!-- NOTE: You could add more <datasource> entries and create -->

  <!-- multiple pools, if you so desired.                       -->





  <!-- ========================================= -->

  <!-- Admin via JMX HTML Adapter. Disable this  -->

  <!-- (at least comment it out) for production  -->

  <!-- environments. When enabled, point your    -->

  <!-- web browser to the localhost:[port] to    -->

  <!-- view the JMX html admin agent.            -->

  <!-- This agent is not created if the          -->

  <!-- management-mode element above is set      -->

  <!-- to "local" instead of to "jmx"            -->

  <!-- ========================================= -->

<!--

  <admin-agent>

    <class>com.sun.jdmk.comm.HtmlAdaptorServer</class>

    <name>Adaptor:name=html</name>

    <maxClients>10</maxClients>

    <port>8082</port>

  </admin-agent>

-->



</poolman>














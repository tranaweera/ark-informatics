# Create new audit schema
CREATE DATABASE IF NOT EXISTS audit;
USE audit;

# Set up audit table
DROP TABLE IF EXISTS `lss_consent_history`;
CREATE TABLE `lss_consent_history` (
  `ID` int(1) NOT NULL AUTO_INCREMENT,
  `TIMESTAMP` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LINK_SUBJECT_STUDY_ID` int(11) NOT NULL,
  `CONSENT_TO_ACTIVE_CONTACT_ID` int(11) DEFAULT NULL,
  `CONSENT_TO_PASSIVE_DATA_GATHERING_ID` int(11) DEFAULT NULL,
  `CONSENT_TO_USE_DATA_ID` int(11) DEFAULT NULL,
  `CONSENT_STATUS_ID` int(11) DEFAULT NULL,
  `CONSENT_TYPE_ID` int(11) DEFAULT NULL,
  `CONSENT_DATE` date DEFAULT NULL,
  `CONSENT_DOWNLOADED` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TABLE IF EXISTS`consent_history`;
CREATE TABLE `consent_history` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `TIMESTAMP` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LINK_SUBJECT_STUDY_ID` int(11) NOT NULL,
  `STUDY_COMP_ID` int(11) NOT NULL,
  `STUDY_COMP_STATUS_ID` int(11) NOT NULL,
  `CONSENT_STATUS_ID` int(11) NOT NULL,
  `CONSENT_TYPE_ID` int(11) NOT NULL,
  `CONSENT_DATE` date NOT NULL,
  `CONSENTED_BY` varchar(100) DEFAULT NULL,
  `COMMENTS` varchar(500) DEFAULT NULL,
  `REQUESTED_DATE` date DEFAULT NULL,
  `RECEIVED_DATE` date DEFAULT NULL,
  `COMPLETED_DATE` date DEFAULT NULL,
  `CONSENT_DOWNLOADED_ID` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

# Set up view to see audit history data
USE study;
DROP VIEW IF EXISTS study.lss_consent_history;
DROP VIEW IF EXISTS study.consent_history;
CREATE VIEW study.lss_consent_history AS SELECT * FROM audit.lss_consent_history;
CREATE VIEW study.consent_history AS SELECT * FROM audit.consent_history;

# Set up trigger to handle for audit history
USE study;
DELIMITER $$
DROP TRIGGER IF EXISTS lss_consent_history_ins$$
CREATE TRIGGER lss_consent_history_ins
AFTER INSERT ON link_subject_study
FOR EACH ROW
BEGIN
  INSERT INTO lss_consent_history SET
  LINK_SUBJECT_STUDY_ID = NEW.ID, CONSENT_TO_ACTIVE_CONTACT_ID = NEW.CONSENT_TO_ACTIVE_CONTACT_ID,
  CONSENT_TO_USE_DATA_ID = NEW.`CONSENT_TO_USE_DATA_ID`, CONSENT_STATUS_ID = NEW.`CONSENT_STATUS_ID`, CONSENT_TYPE_ID = NEW.`CONSENT_TYPE_ID`,
  CONSENT_DATE = NEW.`CONSENT_DATE`, CONSENT_DOWNLOADED = NEW.`CONSENT_DOWNLOADED`;
END;
$$
DELIMITER $$
DROP TRIGGER IF EXISTS consent_history_ins$$
CREATE TRIGGER consent_history_ins
AFTER INSERT ON consent
FOR EACH ROW
BEGIN
  INSERT INTO consent_history SET
  LINK_SUBJECT_STUDY_ID = NEW.LINK_SUBJECT_STUDY_ID, STUDY_COMP_ID = NEW.STUDY_COMP_ID, STUDY_COMP_STATUS_ID = NEW.`STUDY_COMP_STATUS_ID`, CONSENT_STATUS_ID = NEW.`CONSENT_STATUS_ID`, 
  CONSENT_TYPE_ID = NEW.`CONSENT_TYPE_ID`, CONSENT_DATE = NEW.`CONSENT_DATE`, CONSENTED_BY = NEW.CONSENTED_BY, COMMENTS = NEW.COMMENTS,
  REQUESTED_DATE = NEW.REQUESTED_DATE, RECEIVED_DATE = NEW.RECEIVED_DATE, COMPLETED_DATE = NEW.COMPLETED_DATE, CONSENT_DOWNLOADED_ID = NEW.`CONSENT_DOWNLOADED_ID`;
END;
$$
DELIMITER $$
DROP TRIGGER IF EXISTS lss_consent_history_upd$$
CREATE TRIGGER lss_consent_history_upd
AFTER UPDATE ON link_subject_study
FOR EACH ROW
BEGIN
	# Only log history if actual change made
	IF ((NEW.CONSENT_DATE != OLD.CONSENT_DATE OR (NEW.CONSENT_DATE IS NOT NULL AND OLD.CONSENT_DATE IS NULL)) OR
		(NEW.CONSENT_STATUS_ID != OLD.CONSENT_STATUS_ID OR (NEW.CONSENT_STATUS_ID IS NOT NULL AND OLD.CONSENT_STATUS_ID IS NULL)) OR
		(NEW.CONSENT_TYPE_ID != OLD.CONSENT_TYPE_ID OR (NEW.CONSENT_TYPE_ID IS NOT NULL AND OLD.CONSENT_TYPE_ID IS NULL)) OR
		(NEW.CONSENT_TO_PASSIVE_DATA_GATHERING_ID != OLD.CONSENT_TO_PASSIVE_DATA_GATHERING_ID OR (NEW.CONSENT_TO_PASSIVE_DATA_GATHERING_ID IS NOT NULL AND OLD.CONSENT_TO_PASSIVE_DATA_GATHERING_ID IS NULL)) OR
		(NEW.CONSENT_TO_ACTIVE_CONTACT_ID != OLD.CONSENT_TO_ACTIVE_CONTACT_ID OR (NEW.CONSENT_TO_ACTIVE_CONTACT_ID IS NOT NULL AND OLD.CONSENT_TO_ACTIVE_CONTACT_ID IS NULL)) OR
		(NEW.CONSENT_TO_USE_DATA_ID != OLD.CONSENT_TO_USE_DATA_ID) OR
		(NEW.CONSENT_DOWNLOADED != OLD.CONSENT_DOWNLOADED OR (NEW.CONSENT_DOWNLOADED IS NOT NULL AND OLD.CONSENT_DOWNLOADED IS NULL))
		) THEN
  INSERT INTO lss_consent_history SET
  LINK_SUBJECT_STUDY_ID = NEW.ID, CONSENT_TO_ACTIVE_CONTACT_ID = NEW.CONSENT_TO_ACTIVE_CONTACT_ID, CONSENT_TO_PASSIVE_DATA_GATHERING_ID = NEW.CONSENT_TO_PASSIVE_DATA_GATHERING_ID,
  CONSENT_TO_USE_DATA_ID = NEW.CONSENT_TO_USE_DATA_ID, CONSENT_STATUS_ID = NEW.CONSENT_STATUS_ID, CONSENT_TYPE_ID = NEW.CONSENT_TYPE_ID,
  CONSENT_DATE = NEW.CONSENT_DATE, CONSENT_DOWNLOADED = NEW.CONSENT_DOWNLOADED;
END IF;
END;
$$
DELIMITER $$
DROP TRIGGER IF EXISTS consent_history_upd$$
CREATE TRIGGER consent_history_upd
AFTER UPDATE ON consent
FOR EACH ROW
BEGIN
	# Only log history if actual change made
	IF ((NEW.STUDY_COMP_STATUS_ID != OLD.STUDY_COMP_STATUS_ID) OR
		(NEW.CONSENTED_BY != OLD.CONSENTED_BY OR (NEW.CONSENTED_BY IS NOT NULL AND OLD.CONSENTED_BY IS NULL)) OR
		(NEW.CONSENT_DATE != OLD.CONSENT_DATE OR (NEW.CONSENT_DATE IS NOT NULL AND OLD.CONSENT_DATE IS NULL)) OR
		(NEW.CONSENT_STATUS_ID != OLD.CONSENT_STATUS_ID OR (NEW.CONSENT_STATUS_ID IS NOT NULL AND OLD.CONSENT_STATUS_ID IS NULL)) OR
		(NEW.CONSENT_TYPE_ID != OLD.CONSENT_TYPE_ID OR (NEW.CONSENT_TYPE_ID IS NOT NULL AND OLD.CONSENT_TYPE_ID IS NULL)) OR
		(NEW.COMMENTS != OLD.COMMENTS OR (NEW.COMMENTS != NULL AND OLD.COMMENTS IS NULL)) OR
  		(NEW.REQUESTED_DATE != OLD.REQUESTED_DATE OR (NEW.REQUESTED_DATE != NULL AND OLD.REQUESTED_DATE IS NULL)) OR
  		(NEW.RECEIVED_DATE != OLD.RECEIVED_DATE OR (NEW.RECEIVED_DATE != NULL AND OLD.RECEIVED_DATE IS NULL)) OR 
  		(NEW.COMPLETED_DATE != OLD.COMPLETED_DATE OR (NEW.COMPLETED_DATE != NULL AND OLD.COMPLETED_DATE IS NULL)) OR
		(NEW.CONSENT_DOWNLOADED_ID != OLD.CONSENT_DOWNLOADED_ID OR (NEW.CONSENT_DOWNLOADED_ID IS NOT NULL AND OLD.CONSENT_DOWNLOADED_ID IS NULL))
		) THEN
  INSERT INTO consent_history SET
  LINK_SUBJECT_STUDY_ID = NEW.LINK_SUBJECT_STUDY_ID, STUDY_COMP_ID = NEW.STUDY_COMP_ID, STUDY_COMP_STATUS_ID = NEW.`STUDY_COMP_STATUS_ID`, CONSENT_STATUS_ID = NEW.`CONSENT_STATUS_ID`, 
  CONSENT_TYPE_ID = NEW.`CONSENT_TYPE_ID`, CONSENT_DATE = NEW.`CONSENT_DATE`, CONSENTED_BY = NEW.CONSENTED_BY, COMMENTS = NEW.COMMENTS,
  REQUESTED_DATE = NEW.REQUESTED_DATE, RECEIVED_DATE = NEW.RECEIVED_DATE, COMPLETED_DATE = NEW.COMPLETED_DATE, CONSENT_DOWNLOADED_ID = NEW.`CONSENT_DOWNLOADED_ID`;
END IF;
END;
$$
DELIMITER ;
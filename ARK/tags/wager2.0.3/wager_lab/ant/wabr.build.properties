#Author: Anton Kattan
#Created: 23 feb 2006
#Taget: biogenix 5



#Base directory for source code, media pages, stylesheets, and custom settings files. This would normally point to the root folder of your project
source.base=/home/cwilliams/projects/biogenix

#This is the folder where you store your config file locally
#It is advised to create a copy of this folder under ${source.base}/properties/ (sibling folder) and edit the configuration files to suit your build
#You might want to have a separate folder for each build you do. That makes it easy to switch between builds without reconfigurations
source.propertiesdir=${source.base}/properties/wabr

#Deployment base. This is where your J2EE server is installed
deploy.base=/home/wabr/tomcat-biogenix

#Webapp folder. This is the name and path to the folder of the generated web application - normally in webapps folder of the werbserver
deploy.home=${deploy.base}/webapps/wabr

# A temporary working folder to compile classes to and to copy stylesheet files, etc ...
# It can be withing your project but preferable, each build has a separate tmp folder outside the project
temp.base=/home/cwilliams/projects/biogenix-build


# Customized client files. When you want to override the default files for a particular build. eg. custom logo
# This folder can have the standard folders: src, pages and stylesheets
# If you are building the base default product the value should be default otherwise the folder that has the client customisation eg clients/<client folder>
client=wabr

#? The type of database. Currently supported (Postgres, Oracle and SQLServer)
# This property gets added to the portal.property file
dbms.type=Oracle

#?
#tomcat.home=/home/biogenix/tomcat-biogenix/


#================================================================================
# Normally you don't need to update the properties below ========================
#================================================================================
#?
#Appserver library folder - library that are already in the web server - don't think it is used anymore
appserver.libdir=${deploy.base}/common/lib

#paths - these are relative paths and you normally won't need to change them

# source code folder relative to the project location - generated classes will be placed under the classes folder in the deployed web application
source.srcdir=${source.base}/src

# Static pages folder - will be coppied to the deployed web application root folder
source.pagesdir=${source.base}/pages

# XML style sheets used by uportal to transform xml to html pages. These will be coppied to the class folder in the deployed web application
source.stylesheetdir=${source.base}/stylesheets



# Client: source code folder relative to the project location - generated classes will be placed under the classes folder in the deployed web application
source.client.srcdir=${source.base}/client/${client}/src

# Client: Static pages folder - will be coppied to the deployed web application root folder
source.client.pagesdir=${source.base}/client/${client}/pages

# Client: XML style sheets used by uportal to transform xml to html pages. These will be coppied to the class folder in the deployed web application
source.client.stylesheetdir=${source.base}/client/${client}/stylesheets



# Where the required lib needs to be coppied - normally withing the web applicaiton lib folder
deploy.libdir=${deploy.home}/WEB-INF/lib

# similar to deploy.libdir but for compiled classes - from source.srcdir
deploy.classesdir=${deploy.home}/WEB-INF/classes

# Temporary folder for classes and coppied stylesheets
temp.classesdir=${temp.base}/classes

# Temporary folder for java docs
temp.docdir=${temp.base}/javadocs

# Collated source code folder (biogenix + client specific code). This folder will contain the base source code the client src folder contnets on top of it
# This approach should be avoided as much as possible ie. creating different customized coppies of the same class with the same classname
temp.sourcedir=${temp.base}/compiledSource





#build.solution.pages=${source.base}/solutions/${solution}/pages
#build.solution.stylesheets=${source.base}/solutions/${solution}/stylesheets
